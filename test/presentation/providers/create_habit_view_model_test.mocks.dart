// Mocks generated by Mockito 5.4.6 from annotations
// in disciplina_visual/test/presentation/providers/create_habit_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:disciplina_visual/data/models/habit.dart' as _i5;
import 'package:disciplina_visual/domain/repositories/habit_repository.dart'
    as _i2;
import 'package:disciplina_visual/domain/usecases/add_habit.dart' as _i3;
import 'package:disciplina_visual/domain/usecases/update_habit.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHabitRepository_0 extends _i1.SmartFake
    implements _i2.HabitRepository {
  _FakeHabitRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddHabit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddHabit extends _i1.Mock implements _i3.AddHabit {
  MockAddHabit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i4.Future<int> call(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habit]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [UpdateHabit].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHabit extends _i1.Mock implements _i6.UpdateHabit {
  MockUpdateHabit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i4.Future<int> call(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habit]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
