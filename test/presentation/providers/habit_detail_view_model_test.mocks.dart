// Mocks generated by Mockito 5.4.6 from annotations
// in disciplina_visual/test/presentation/providers/habit_detail_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i12;

import 'package:disciplina_visual/data/models/completion.dart' as _i7;
import 'package:disciplina_visual/domain/repositories/habit_repository.dart'
    as _i2;
import 'package:disciplina_visual/domain/usecases/add_completion.dart' as _i8;
import 'package:disciplina_visual/domain/usecases/calculate_streak.dart' as _i3;
import 'package:disciplina_visual/domain/usecases/delete_future_completions.dart'
    as _i4;
import 'package:disciplina_visual/domain/usecases/delete_habit.dart' as _i10;
import 'package:disciplina_visual/domain/usecases/get_completions.dart' as _i5;
import 'package:disciplina_visual/domain/usecases/remove_completion.dart'
    as _i9;
import 'package:disciplina_visual/presentation/utils/date_provider.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHabitRepository_0 extends _i1.SmartFake
    implements _i2.HabitRepository {
  _FakeHabitRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreak_1 extends _i1.SmartFake implements _i3.Streak {
  _FakeStreak_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteFutureCompletions_2 extends _i1.SmartFake
    implements _i4.DeleteFutureCompletions {
  _FakeDeleteFutureCompletions_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCompletions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCompletions extends _i1.Mock implements _i5.GetCompletions {
  MockGetCompletions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i6.Future<List<_i7.Completion>> call(int? habitId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habitId]),
            returnValue: _i6.Future<List<_i7.Completion>>.value(
              <_i7.Completion>[],
            ),
          )
          as _i6.Future<List<_i7.Completion>>);
}

/// A class which mocks [AddCompletion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCompletion extends _i1.Mock implements _i8.AddCompletion {
  MockAddCompletion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i6.Future<void> call(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habitId, date]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [RemoveCompletion].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveCompletion extends _i1.Mock implements _i9.RemoveCompletion {
  MockRemoveCompletion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i6.Future<void> call(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habitId, date]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [DeleteHabit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteHabit extends _i1.Mock implements _i10.DeleteHabit {
  MockDeleteHabit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HabitRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHabitRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HabitRepository);

  @override
  _i6.Future<int> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [CalculateStreak].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculateStreak extends _i1.Mock implements _i3.CalculateStreak {
  MockCalculateStreak() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Streak call(List<_i7.Completion>? completions, DateTime? today) =>
      (super.noSuchMethod(
            Invocation.method(#call, [completions, today]),
            returnValue: _FakeStreak_1(
              this,
              Invocation.method(#call, [completions, today]),
            ),
          )
          as _i3.Streak);
}

/// A class which mocks [DateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateProvider extends _i1.Mock implements _i11.DateProvider {
  MockDateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DeleteFutureCompletions get deleteFutureCompletions =>
      (super.noSuchMethod(
            Invocation.getter(#deleteFutureCompletions),
            returnValue: _FakeDeleteFutureCompletions_2(
              this,
              Invocation.getter(#deleteFutureCompletions),
            ),
          )
          as _i4.DeleteFutureCompletions);

  @override
  DateTime get simulatedToday =>
      (super.noSuchMethod(
            Invocation.getter(#simulatedToday),
            returnValue: _FakeDateTime_3(
              this,
              Invocation.getter(#simulatedToday),
            ),
          )
          as DateTime);

  @override
  int get dayOffset =>
      (super.noSuchMethod(Invocation.getter(#dayOffset), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void advanceDay() => super.noSuchMethod(
    Invocation.method(#advanceDay, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> resetDay() =>
      (super.noSuchMethod(
            Invocation.method(#resetDay, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
