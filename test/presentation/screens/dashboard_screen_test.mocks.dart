// Mocks generated by Mockito 5.4.6 from annotations
// in disciplina_visual/test/presentation/screens/dashboard_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:disciplina_visual/data/models/completion.dart' as _i10;
import 'package:disciplina_visual/data/models/habit.dart' as _i5;
import 'package:disciplina_visual/domain/repositories/habit_repository.dart'
    as _i9;
import 'package:disciplina_visual/domain/usecases/delete_future_completions.dart'
    as _i3;
import 'package:disciplina_visual/domain/usecases/get_all_habits.dart' as _i2;
import 'package:disciplina_visual/presentation/providers/dashboard_view_model.dart'
    as _i4;
import 'package:disciplina_visual/presentation/utils/date_provider.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAllHabits_0 extends _i1.SmartFake implements _i2.GetAllHabits {
  _FakeGetAllHabits_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteFutureCompletions_1 extends _i1.SmartFake
    implements _i3.DeleteFutureCompletions {
  _FakeDeleteFutureCompletions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DashboardViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardViewModel extends _i1.Mock
    implements _i4.DashboardViewModel {
  MockDashboardViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllHabits get getAllHabits =>
      (super.noSuchMethod(
            Invocation.getter(#getAllHabits),
            returnValue: _FakeGetAllHabits_0(
              this,
              Invocation.getter(#getAllHabits),
            ),
          )
          as _i2.GetAllHabits);

  @override
  List<_i5.Habit> get habits =>
      (super.noSuchMethod(
            Invocation.getter(#habits),
            returnValue: <_i5.Habit>[],
          )
          as List<_i5.Habit>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> loadHabits() =>
      (super.noSuchMethod(
            Invocation.method(#loadHabits, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateProvider extends _i1.Mock implements _i8.DateProvider {
  MockDateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DeleteFutureCompletions get deleteFutureCompletions =>
      (super.noSuchMethod(
            Invocation.getter(#deleteFutureCompletions),
            returnValue: _FakeDeleteFutureCompletions_1(
              this,
              Invocation.getter(#deleteFutureCompletions),
            ),
          )
          as _i3.DeleteFutureCompletions);

  @override
  DateTime get simulatedToday =>
      (super.noSuchMethod(
            Invocation.getter(#simulatedToday),
            returnValue: _FakeDateTime_2(
              this,
              Invocation.getter(#simulatedToday),
            ),
          )
          as DateTime);

  @override
  int get dayOffset =>
      (super.noSuchMethod(Invocation.getter(#dayOffset), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void advanceDay() => super.noSuchMethod(
    Invocation.method(#advanceDay, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> resetDay() =>
      (super.noSuchMethod(
            Invocation.method(#resetDay, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i9.HabitRepository {
  MockHabitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i5.Habit>> getAllHabits() =>
      (super.noSuchMethod(
            Invocation.method(#getAllHabits, []),
            returnValue: _i6.Future<List<_i5.Habit>>.value(<_i5.Habit>[]),
          )
          as _i6.Future<List<_i5.Habit>>);

  @override
  _i6.Future<int> createHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#createHabit, [habit]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<int> updateHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#updateHabit, [habit]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<int> deleteHabit(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHabit, [id]),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> addCompletion(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#addCompletion, [habitId, date]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeCompletion(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#removeCompletion, [habitId, date]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i10.Completion>> getCompletionsForHabit(int? habitId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompletionsForHabit, [habitId]),
            returnValue: _i6.Future<List<_i10.Completion>>.value(
              <_i10.Completion>[],
            ),
          )
          as _i6.Future<List<_i10.Completion>>);

  @override
  _i6.Future<void> deleteFutureCompletions(DateTime? cutoffDate) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFutureCompletions, [cutoffDate]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
