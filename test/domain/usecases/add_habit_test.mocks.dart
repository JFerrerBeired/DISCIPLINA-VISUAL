// Mocks generated by Mockito 5.4.6 from annotations
// in disciplina_visual/test/domain/usecases/add_habit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:disciplina_visual/data/models/completion.dart' as _i5;
import 'package:disciplina_visual/data/models/habit.dart' as _i4;
import 'package:disciplina_visual/domain/repositories/habit_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i2.HabitRepository {
  MockHabitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Habit>> getAllHabits() =>
      (super.noSuchMethod(
            Invocation.method(#getAllHabits, []),
            returnValue: _i3.Future<List<_i4.Habit>>.value(<_i4.Habit>[]),
          )
          as _i3.Future<List<_i4.Habit>>);

  @override
  _i3.Future<int> createHabit(_i4.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#createHabit, [habit]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> updateHabit(_i4.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#updateHabit, [habit]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> deleteHabit(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHabit, [id]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> addCompletion(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#addCompletion, [habitId, date]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeCompletion(int? habitId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#removeCompletion, [habitId, date]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.Completion>> getCompletionsForHabit(int? habitId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompletionsForHabit, [habitId]),
            returnValue: _i3.Future<List<_i5.Completion>>.value(
              <_i5.Completion>[],
            ),
          )
          as _i3.Future<List<_i5.Completion>>);

  @override
  _i3.Future<void> deleteFutureCompletions(DateTime? cutoffDate) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFutureCompletions, [cutoffDate]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
